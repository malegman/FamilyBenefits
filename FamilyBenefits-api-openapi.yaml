openapi: 3.0.3
info:
  title: Family Benefits
  description: API сервиса "Пособия для семьи с детьми"
  version: 1.0.0
  contact:
    email: smegovic@gmail.com
servers:
  - url: http://localhost
tags:
  - name: auth
    description: Операции, связанные с аутентификацией и авторизацией пользователя в системе
  - name: user
    description: Получение и изменение пользователя
  - name: admin
    description: Получение и изменение администратора
  - name: super admin
    description: Операции супер-администратора
  - name: city
    description: Получение и изменение города
  - name: institution
    description: Получение и изменение учреждения
  - name: benefit
    description: Получение и изменение пособия
  - name: criterion
    description: Получение и изменение критерия
  - name: criterion type
    description: Получение и изменение типа критерия


paths:
  /api/auth/pre-login:
    post:
      tags:
        - auth
      summary: Отправляет на указанную почту код для входа в систему
      description:
        Отправляет на указанную почту код для входа в систему.
        Для анонимного клиента.
      parameters:
        - in: query
          name: e
          description: email пользователя
          schema:
            type: string
            example: example@email.com
          required: true
      responses:
        '200':
          description: Вход в систему выполнен
          content: { }
        '400':
          description: Вход в систему уже выполнен
          content: { }
        '404':
          description: Пользователь с указанным email не найден
          content: { }
      security: [ ]
  /api/auth/login:
    post:
      tags:
        - auth
      summary: Вход в систему
      description:
        Вход в систему.
        Для анонимного клиента.
      parameters:
        - in: query
          name: e
          description: email пользователя
          schema:
            type: string
            example: example@email.com
          required: true
        - in: query
          name: lc
          description: код входа пользователя
          schema:
            type: integer
            example: 123456
          required: true
      responses:
        '200':
          description: Вход в систему выполнен
          headers:
            Authorization:
              schema:
                description: Токен доступа в формате jwt
                type: string
                example: Bearer d6tefy0.fh3653.26r3fyg
            Set-Cookie:
              schema:
                description: Токен восстановления
                type: string
                example: refresh=ldkfj4h728fhd
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Вход в систему уже выполнен
          content: { }
        '404':
          description: Пользователь с указанными данными не найден
          content: { }
      security: [ ]
  /api/auth/logout/{id}:
    post:
      tags:
        - auth
      summary: Выход из системы
      description:
        Выход из системы.
        О запросившем клиенте.
        Для администратора. Для пользователя.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Выход из системы выполнен
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Пользователь с указанными данными не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/users:
    post:
      tags:
        - user
      summary: Создает пользователя. Регистрация гостя
      description:
        Создает пользователя. Регистрация гостя.
        Для анонимного клиента.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSave'
        required: true
      responses:
        '201':
          description: Пользователь создан
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Администратор или пользователь с данным email уже существует
            (2) Даты рождения пользователя или детей не соответствуют формату "dd.mm.yyyy"
            (3) Даты рождения пользователя или детей позже текущей даты
            (4) Указанный "email" не является email
            (5) Некорректное строковое поле
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Город или критерии с указанными ID не найдены
          content: { }
      security: [ ]
  /api/users/{id}:
    get:
      tags:
        - user
      summary: Возвращает информацию о пользователе по ID
      description:
        Возвращает информацию о пользователе по ID.
        О запросившем клиенте.
        Для пользователя.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные о пользователе получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Пользователь с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    put:
      tags:
        - user
      summary: Обновляет пользователя по ID
      description:
        Обновляет данные пользователя.
        О запросившем клиенте.
        Для пользователя.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSave'
        required: true
      responses:
        '201':
          description: Пользователь обновлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Пользователь с данным email уже существует
            (2) Даты рождения пользователя или детей не соответствуют формату "dd.mm.yyyy"
            (3) Даты рождения пользователя или детей позже текущей даты
            (4) Указанный "email" не является email
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description:
            Пользователь, город или критерии с указанными ID не найдены
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    delete:
      tags:
        - user
      summary: Удаляет пользователя по ID
      description:
        Удаляет пользователя по ID. Если пользователь имеет роль админа, то удаляются роль пользователя и пользовательские данные.
        О запросившем клиенте.
        Для пользователя.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Пользователь удален
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Пользователь с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/users/init-data:
    get:
      tags:
        - user
      summary: Возвращает дополнительные данные для пользователя
      description:
        Возвращает дополнительные данные для создания или обновления пользователя.
        Данные содержат в себе списки кратких информаций о городах и полных критериях.
      responses:
        '200':
          description: Дополнительные данные пользователя получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInitData'
      security: [ ]


  /api/admins/{id}:
    get:
      tags:
        - admin
      summary: Возвращает информацию об администраторе по ID
      description:
        Возвращает информацию об администраторе по ID.
        О запросившем клиенте.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID администратора
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные об администраторе получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Администратор с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    put:
      tags:
        - admin
      summary: Обновляет администратора по ID
      description:
        Обновляет данные администратора по ID.
        О запросившем клиенте.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID администратора
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSave'
        required: true
      responses:
        '201':
          description: Администратор обновлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Администратор или пользователь с данным email уже существует
            (4) Указанный "email" не является email
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Администратор с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/sa/admins:
    post:
      tags:
        - super admin
      summary: Создает администратора
      description:
        Создает администратора.
        Для супер-администратора.
        Необходима авторизация.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSave'
        required: true
      responses:
        '201':
          description: Администратор создан
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Администратор или пользователь с данным email уже существует
            (4) Указанный "email" не является email
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/sa/admins/{id}:
    delete:
      tags:
        - super admin
      summary: Удаляет администратора по ID
      description:
        Удаляет администратора по ID.
        Для супер администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID администратора
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Администратор удален
          content: { }
        '400':
          description: Невозможно удалить администратора с ролью супер администратора
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Администратор с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/sa/from-user/{id}:
    post:
      tags:
        - super admin
      summary: Добавляет роль администратора пользователю
      description:
        Добавляет роль администратора пользователю.
        Для супер администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Роль администратора добавлена
          content: { }
        '400':
          description: Указанный пользователь не имеет роли пользователя или уже имеет роль администратора
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Пользователь с данным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/sa/to-user/{id}:
    post:
      tags:
        - super admin
      summary: Добавляет роль пользователя администратору
      description:
        Добавляет роль пользователя администратору.
        Для супер администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID администратора
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Роль пользователя добавлена
          content: { }
        '400':
          description: Указанный администратор не имеет роли администратора или уже имеет роль пользователя
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Администратор с данным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/sa/to-super/{id}:
    post:
      tags:
        - super admin
      summary: Передает роль супера администратора другому администратору
      description:
        Передает роль супер администратора другому администратору.
        Для супер администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID администратора
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Роль супер администратора передана
          content: { }
        '400':
          description: Администратор уже имеет роль супер администратора
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Администратор с данным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/cities:
    get:
      tags:
        - city
      summary:
        Возвращает список городов, в которых есть учреждения и пособия, по фильтру
      description:
        Возвращает список городов, в которых есть учреждения и пособия.
        Фильтр по названию или ID пособия или учреждения.
      parameters:
        - name: name
          in: query
          description: Название города
          schema:
            type: string
            example: name
          required: false
        - name: idBenefit
          in: query
          description: ID пособия
          schema:
            type: string
            example: td56387fhj
          required: false
        - name: idInst
          in: query
          description: ID учреждения
          schema:
            type: string
            example: td56387fhj
          required: false
      responses:
        '200':
          description: Список городов получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
      security: [ ]
    post:
      tags:
        - city
      summary: Создает город
      description:
        Создает город.
        Для администратора.
        Необходима авторизация.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CitySave'
        required: true
      responses:
        '201':
          description: Город добавлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Город с указанными данными уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/cities/{id}:
    get:
      tags:
        - city
      summary: Возвращает информацию о городе по ID
      description:
        Возвращает информацию о городе по ID.
      parameters:
        - name: id
          in: path
          description: ID города
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные о городе получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityInfo'
        '404':
          description: Город с указанным ID не найден
          content: { }
      security: [ ]
    put:
      tags:
        - city
      summary: Обновляет город по ID
      description:
        Обновляет город по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID города
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CitySave'
        required: true
      responses:
        '201':
          description: Город обновлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Город с данным названием уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Город с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    delete:
      tags:
        - city
      summary: Удаляет город по ID
      description:
        Удаляет город по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID города
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Город удален
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Город с указанным ID не найден
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/cities/partial:
    get:
      tags:
        - city
      summary: Возвращает список городов, в которых нет учреждений или пособий
      description:
        Возвращает список городов, в которых нет учреждений или пособий.
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Список городов получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/institutions:
    get:
      tags:
        - institution
      summary:
        Возвращает список учреждений, в которых есть пособия, по фильтру
      description:
        Возвращает список учреждений, в которых есть пособия.
        Фильтр по названию или ID города или пособия.
      parameters:
        - name: name
          in: query
          description: Название учреждения
          schema:
            type: string
            example: name
          required: false
        - name: idCity
          in: query
          description: ID города
          schema:
            type: string
            example: td56387fhj
          required: false
        - name: idBenefit
          in: query
          description: ID пособия
          schema:
            type: string
            example: td56387fhj
          required: false
      responses:
        '200':
          description: Список учреждений получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
      security: [ ]
    post:
      tags:
        - institution
      summary: Создает учреждение
      description:
        Создает учреждение.
        Для администратора.
        Необходима авторизация.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstitutionSave'
        required: true
      responses:
        '201':
          description: Учреждение создано
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Учреждение с указанными данными уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найдены город или пособия
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/institutions/{id}:
    get:
      tags:
        - institution
      summary: Возвращает информацию об учреждении по ID
      description:
        Возвращает информацию об учреждении по ID.
      parameters:
        - name: id
          in: path
          description: ID учреждения
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные об учреждении получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionInfo'
        '404':
          description: Учреждение с указанным ID не найдено
          content: { }
      security: [ ]
    put:
      tags:
        - institution
      summary: Обновляет учреждение по ID
      description:
        Обновляет учреждение по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID учреждения
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstitutionSave'
        required: true
      responses:
        '201':
          description: Учреждение обновлено
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Учреждение с данным названием уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Учреждение с указанным ID не найдено
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    delete:
      tags:
        - institution
      summary: Удаляет учреждение по ID
      description:
        Удаляет учреждение по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID учреждения
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Учреждение удалено
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Учреждение с указанным ID не найдено
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/institutions/partial:
    get:
      tags:
        - institution
      summary: Возвращает список учреждений, в которых нет пособий
      description:
        Возвращает список учреждений, в которых нет пособий
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Список учреждений получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/institutions/init-data:
    get:
      tags:
        - institution
      summary: Возвращает дополнительные данные для учреждения
      description:
        Возвращает дополнительные данные для добавления или обновления учреждения.
        Данные содержат в себе список кратких информаций о городах и пособиях.
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Дополнительные данные учреждения получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionInitData'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/benefits:
    get:
      tags:
        - benefit
      summary:
        Возвращает список пособий, в которых есть города, учреждения и критерии, по фильтру
      description:
        Возвращает список пособий, в которых есть города, учреждения и критерии.
        Фильтр по названию или ID города, учреждения или критерия.
      parameters:
        - name: name
          in: query
          description: Название пособия
          schema:
            type: string
            example: name
          required: false
        - name: idCity
          in: query
          description: ID города
          schema:
            type: string
            example: td56387fhj
          required: false
        - name: idInstitution
          in: query
          description: ID учреждения
          schema:
            type: string
            example: td56387fhj
          required: false
        - name: idCriterion
          in: query
          description: ID критерия
          schema:
            type: string
            example: td56387fhj
          required: false
      responses:
        '200':
          description: Список пособий получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
      security: [ ]
    post:
      tags:
        - benefit
      summary: Создает пособие
      description:
        Создает пособие.
        Для администратора.
        Необходима авторизация.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenefitSave'
        required: true
      responses:
        '201':
          description: Пособие создано
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Пособие с указанными данными уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/benefits/{id}:
    get:
      tags:
        - benefit
      summary: Возвращает информацию о пособии по ID
      description:
        Возвращает информацию о пособии по ID.
      parameters:
        - name: id
          in: path
          description: ID пособия
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные о пособии получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BenefitInfo'
        '404':
          description: Пособие с указанным ID не найдено
          content: { }
      security: [ ]
    put:
      tags:
        - benefit
      summary: Обновляет пособие по ID
      description:
        Обновляет пособие по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пособия
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenefitUpdate'
        required: true
      responses:
        '201':
          description: Пособие обновлено
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Пособие с данным названием уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найдено пособие с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    delete:
      tags:
        - benefit
      summary: Удаляет пособие по ID
      description:
        Удаляет пособие по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID пособия
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Пособие удалено
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найдено пособие с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/benefits/partial:
    get:
      tags:
        - benefit
      summary: Возвращает список пособий, в которых нет городов, учреждений или критерий
      description:
        Возвращает список пособий, в которых нет городов, учреждений или критерий.
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Список пособий получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/benefits/init-data:
    get:
      tags:
        - benefit
      summary: Возвращает дополнительные данные для пособия
      description:
        Возвращает дополнительные данные для добавления или обновления пособия.
        Данные содержат в себе списки кратких информаций о городах, учреждениях и полных критериях
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Дополнительные данные пособия получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BenefitInitData'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/benefits/user/{idUser}:
    get:
      tags:
        - benefit
      summary: Возвращает список предложенных пособий пользователя по его ID
      description:
        Возвращает список предложенных пособий пользователя по его ID.
        Для пользователя.
        Необходима авторизация.
      parameters:
        - name: idUser
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Список предложенных пособий получено
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '400':
          description: Критерии пользователя устарели
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найден пользователь с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/criteria:
    get:
      tags:
        - criterion
      summary:
        Возвращает список критерий, в которых есть пособия, по фильтру
      description:
        Возвращает список критерий, в которых есть пособия.
        Фильтр по названию или ID пособия или типа критерия.
      parameters:
        - name: name
          in: query
          description: Название критерия
          schema:
            type: string
            example: name
          required: false
        - name: idBenefit
          in: query
          description: ID пособия
          schema:
            type: string
            example: td56387fhj
          required: false
        - name: idCriterionType
          in: query
          description: ID типа критерия
          schema:
            type: string
            example: td56387fhj
          required: false
      responses:
        '200':
          description: Список всех критерий получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
      security: [ ]
    post:
      tags:
        - criterion
      summary: Создает критерий
      description:
        Создает критерий.
        Для администратора.
        Необходима авторизация.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriterionSave'
        required: true
      responses:
        '201':
          description: Критерий добавлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Критерий с указанными данными уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/criteria/{id}:
    get:
      tags:
        - criterion
      summary: Возвращает информацию о критерии по ID
      description:
        Возвращает информацию о критерии по ID.
      parameters:
        - name: id
          in: path
          description: ID критерия
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные о критерии получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriterionInfo'
        '404':
          description: Критерий с указанным ID не найден
          content: { }
      security: [ ]
    put:
      tags:
        - criterion
      summary: Обновляет критерий по ID
      description:
        Обновляет критерий по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID критерия
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriterionSave'
        required: true
      responses:
        '201':
          description: Критерий обновлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Критерий с данным названием уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найден критерий с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    delete:
      tags:
        - criterion
      summary: Удаляет критерий по ID
      description:
        Удаляет критерий по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID критерия
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Критерий удален
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найден критерий с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/criteria/partial:
    get:
      tags:
        - criterion
      summary: Возвращает список критерий, в которых нет пособий
      description:
        Возвращает список критерий, в которых нет пособий.
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Список всех критерий получено
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/criteria/init-data:
    get:
      tags:
        - criterion
      summary: Возвращает дополнительные данные для критерия
      description:
        Возвращает дополнительные данные для добавления или обновления критерия.
        Данные содержат в себе множетсво кратких информаций о типах критерий.
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Дополнительные данные критерия получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriterionInitData'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/criteria/user/{idUser}:
    get:
      tags:
        - criterion
      summary: Возвращает список критерий пользователя по его ID
      description:
        Возвращает список критерий пользователя по его ID.
        Для пользователя.
        Необходима авторизация.
      parameters:
        - name: idUser
          in: path
          description: ID пользователя
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Список критерий получено
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найден пользователь с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


  /api/criterion-types:
    get:
      tags:
        - criterion type
      summary:
        Возвращает список типов критерия, в которых есть критерии, по фильтру
      description:
        Возвращает список типов критерия, в которых есть критерии.
        Фильтр по названию.
      parameters:
        - name: name
          in: query
          description: Название типа критерия
          schema:
            type: string
            example: name
          required: false
      responses:
        '200':
          description: Список типов критерия получено
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
      security: [ ]
    post:
      tags:
        - criterion type
      summary: Создает тип критерия
      description:
        Создает тип критерия.
        Для администратора.
        Необходима авторизация.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriterionTypeSave'
        required: true
      responses:
        '201':
          description: Тип критерия создан
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Тип критерия с указанными данными уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/criterion-types/{id}:
    get:
      tags:
        - criterion type
      summary: Возвращает информацию о типе критерия
      description:
        Возвращает информацию о типе критерия.
      parameters:
        - name: id
          in: path
          description: ID типа критерия
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '200':
          description: Данные о типе критерия получены
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriterionTypeInfo'
        '404':
          description: Тип критерия с указанным ID не найден
          content: { }
      security: [ ]
    put:
      tags:
        - criterion type
      summary: Обновляет тип критерия по ID
      description:
        Обновляет тип критерия по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID типа критерия
          schema:
            type: string
            example: td56387fhj
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriterionTypeSave'
        required: true
      responses:
        '201':
          description: Тип критерия обновлен
          content: { }
        '400':
          description:
            (Код варианта) Вариант
            (1) Тип критерия с данным названием уже существует
            (5) Некорректное строковое поле
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найден тип критерия с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
    delete:
      tags:
        - criterion type
      summary: Удаляет тип критерия по ID
      description:
        Удаляет тип критерия по ID.
        Для администратора.
        Необходима авторизация.
      parameters:
        - name: id
          in: path
          description: ID типа критерия
          schema:
            type: string
            example: td56387fhj
          required: true
      responses:
        '201':
          description: Тип критерия удален
          content: { }
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
        '404':
          description: Не найден тип критерия с указанным ID
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]
  /api/criterion-types/partial:
    get:
      tags:
        - criterion type
      summary: Возвращает список типов критерия, в которых нет критерий
      description:
        Возвращает список типов критерия, в которых нет критерий.
        Для администратора.
        Необходима авторизация.
      responses:
        '200':
          description: Список типов критерия получено
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ObjectShortInfo'
        '401':
          description: Клиент не авторизован
          content: { }
        '403':
          description: Нет доступа
          content: { }
      security:
        - bearerAuth: [ ]
        - apiKey: [ ]


components:

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: cookie
      name: refresh

  schemas:
    UserInfo:
      description: Информация о пользователе
      properties:
        id:
          description: ID пользователя
          type: string
          example: td56387fhj
        name:
          description: Имя пользователя
          type: string
          example: name
        email:
          description: Электронная почта пользователя
          type: string
          example: exmaple@mail.com
        birthDateChildren:
          description: Список дат рождений детей пользователя
          type: array
          items:
            type: string
            format: date
            example: 01.01.2022
        dateBirth:
          description: Дата рождения пользователя
          type: string
          format: date
          example: 01.01.2022
        nameRoleList:
          description: Список названий ролей пользователя
          type: array
          items:
            description: Название роли
            type: string
            example: name
        nameCity:
          description: Название города пользователя
          type: string
          example: name
    UserSave:
      description: Объект запроса для сохранения пользователя, создания или обновления
      properties:
        name:
          description: Имя пользователя
          type: string
          example: name
        email:
          description: Электронная почта пользователя
          type: string
          example: exmaple@mail.com
        birthDateChildren:
          description: Список дат рождений детей пользователя
          type: array
          items:
            description: Дата рождения ребенка
            type: string
            format: date
            example: 01.01.2022
        dateBirth:
          description: Дата рождения пользователя
          type: string
          format: date
          example: 01.01.2022
        idCity:
          description: ID города пользователя
          type: string
          example: td56387fhj
        idCriterionList:
          description: Список ID критерий пользователя
          type: array
          items:
            description: ID критерия
            type: string
            example: td56387fhj
    UserInitData:
      description: Дополнительные данные для создания или обновления пользователя.
        Содержат в себе списки кратких информаций о городах и полных инф. о критериях
      properties:
        shortCityList:
          description: Список кратких информаций о городах
          type: array
          items:
            $ref: '#/components/schemas/ObjectShortInfo'
        criterionList:
          description: Список информаций о критериях
          type: array
          items:
            $ref: '#/components/schemas/CriterionInfo'


    LoginResponse:
      description: Объект ответа на вход в систему
      properties:
        idUser:
          description: ID пользователя
          type: string
          example: td56387fhj
        nameUser:
          description: Имя пользователя
          type: string
          example: name
        nameRoleUserList:
          description: Список названий ролей пользователя
          type: array
          items:
            description: Роль пользователя
            type: string
            example: role


    AdminInfo:
      description: Информация об администраторе
      properties:
        id:
          description: ID администратора
          type: string
          example: td56387fhj
        name:
          description: Имя администратора
          type: string
          example: name
        email:
          description: Электронная почта администратора
          type: string
          example: exmaple@mail.com
        nameRoleList:
          description: Список названий ролей администратора
          type: array
          items:
            description: Название роли
            type: string
            example: name
    AdminSave:
      description: Объект запроса для сохранения администратора, создания или обновления
      properties:
        name:
          description: Имя администратора
          type: string
          example: name
        email:
          description: Электронная почта администратора
          type: string
          example: exmaple@mail.com


    CriterionTypeInfo:
      description: Информация о типе критерия
      properties:
        id:
          description: ID типа критерия
          type: string
          example: td56387fhj
        name:
          description: Название типа критерия
          type: string
          example: name
        info:
          description: Информация типа критерия
          type: string
          example: info
    CriterionTypeSave:
      description: Объект запроса для сохранения типа критерия, создания или обновления
      properties:
        name:
          description: Название типа критерия
          type: string
          example: name
        info:
          description: Информация типа критерия
          type: string
          example: info


    CriterionInfo:
      description: Информация о критерии для подбора пособий
      properties:
        id:
          description: ID критерия
          type: string
          example: td56387fhj
        name:
          description: Название критерия
          type: string
          example: name
        info:
          description: Информация критерия
          type: string
          example: info
        nameCriterionType:
          description: Название типа критерия данного критерия
          type: string
          example: name
    CriterionSave:
      description: Объект запроса для сохранения критерия, создания или обновления
      properties:
        name:
          description: Название критерия
          type: string
          example: name
        info:
          description: Информация критерия
          type: string
          example: info
        idCriterionType:
          description: ID типа критерия критерия
          type: string
          example: td56387fhj
    CriterionInitData:
      description: Дополнительные данные для создания или обновления критерия
        Содержат в себе список кратких информаций о типах критериях
      properties:
        shortCriterionTypeList:
          description: Список кратких информаций о типах критерия
          type: array
          items:
            $ref: '#/components/schemas/ObjectShortInfo'


    CityInfo:
      description: Информация о городе
      properties:
        id:
          description: ID города
          type: string
          example: td56387fhj
        name:
          description: Название города
          type: string
          example: name
        info:
          description: Информация города
          type: string
          example: info
    CitySave:
      description: Объект запроса для сохранения города, создания или обновления
      properties:
        name:
          description: Название города
          type: string
          example: name
        info:
          description: Информация города
          type: string
          example: info


    InstitutionInfo:
      description: Информация об учреждении
      properties:
        id:
          description: ID учреждения
          type: string
          example: td56387fhj
        name:
          description: Название учреждения
          type: string
          example: name
        address:
          description: Адрес учреждения
          type: string
          example: address
        phone:
          description: Телефон учреждения
          type: string
          example: 8-888-888-88-88
        email:
          description: Электронная почта учржедения
          type: string
          example: example@mail.com
        schedule:
          description: График работы учреждения
          type: string
          example: График
        nameCity:
          description: Название города учреждения
          type: string
          example: name
    InstitutionSave:
      description: Объект запроса для сохранения учреждения, создания или обновления
      properties:
        name:
          description: Название учреждения
          type: string
          example: name
        address:
          description: Адрес учреждения
          type: string
          example: address
        phone:
          description: Телефон учреждения
          type: string
          example: 8-888-888-88-88
        email:
          description: Электронная почта учржедения
          type: string
          example: example@mail.com
        schedule:
          description: График работы учреждения
          type: string
          example: График
        idCity:
          description: ID города учреждения
          type: string
          example: td56387fhj
        idBenefitList:
          description: Список ID пособий учреждения
          type: array
          items:
            description: ID пособия
            type: string
            example: td56387fhj
    InstitutionInitData:
      description: Дополнительные данные для создания или обновления учреждения
        Содержат в себе список кратких информаций о городах и пособиях
      properties:
        shortCityList:
          description: Список кратких информаций о городах
          type: array
          items:
            $ref: '#/components/schemas/ObjectShortInfo'
        shortBenefitList:
          description: Список кратких информаций о пособиях
          type: array
          items:
            $ref: '#/components/schemas/ObjectShortInfo'
    
    
    BenefitInfo:
      description: Информация о пособии
      properties:
        id:
          description: ID пособия
          type: string
          example: td56387fhj
        name:
          description: Название пособия
          type: string
          example: name
        info:
          description: Информация пособия
          type: string
          example: info
        documents:
          description: Документы для получения пособия
          type: string
          example: documents
    BenefitSave:
      description: Объект запроса для сохранения пособия, создания или обновления
      properties:
        name:
          description: Название пособия
          type: string
          example: name
        info:
          description: Информация пособия
          type: string
          example: info
        documents:
          description: Документы для получения пособия
          type: string
          example: documents
        idCityList:
          description: Список ID городов пособия
          type: array
          items:
            description: ID города
            type: string
            example: td56387fhj
        idInstitutionList:
          description: Список ID учреждений пособия
          type: array
          items:
            description: ID учреждения
            type: string
            example: td56387fhj
        idCriterionList:
          description: Список ID критерий пособия
          type: array
          items:
            description: ID критерия
            type: string
            example: td56387fhj
    BenefitInitData:
      description: Дополнительные данные для создания или обновления пособия
        Содержат в себе списки кратких информаций о городах, учреждениях и полных критериях
      properties:
        shortCityList:
          description: Список кратких информаций о городах
          type: array
          items:
            $ref: '#/components/schemas/ObjectShortInfo'
        criterionList:
          description: Список информаций о критериях
          type: array
          items:
            $ref: '#/components/schemas/CriterionInfo'
        shortInsitutionsList:
          description: Список кратких информаций об учреждениях
          type: array
          items:
            $ref: '#/components/schemas/ObjectShortInfo'


    ObjectShortInfo:
      description: Краткая информация об объекте
      properties:
        idObject:
          description: ID объекта
          type: string
          example: td56387fhj
        nameObject:
          description: Название объекта
          type: string
          example: name
